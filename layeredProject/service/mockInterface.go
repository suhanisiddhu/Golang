// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	entities "layeredProject/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorService is a mock of AuthorService interface.
type MockAuthorService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorServiceMockRecorder
}

// MockAuthorServiceMockRecorder is the mock recorder for MockAuthorService.
type MockAuthorServiceMockRecorder struct {
	mock *MockAuthorService
}

// NewMockAuthorService creates a new mock instance.
func NewMockAuthorService(ctrl *gomock.Controller) *MockAuthorService {
	mock := &MockAuthorService{ctrl: ctrl}
	mock.recorder = &MockAuthorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorService) EXPECT() *MockAuthorServiceMockRecorder {
	return m.recorder
}

// DeleteAuthor mocks base method.
func (m *MockAuthorService) DeleteAuthor(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAuthorServiceMockRecorder) DeleteAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthorService)(nil).DeleteAuthor), arg0, arg1)
}

// PostAuthor mocks base method.
func (m *MockAuthorService) PostAuthor(arg0 context.Context, arg1 entities.Author) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAuthor", arg0, arg1)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAuthor indicates an expected call of PostAuthor.
func (mr *MockAuthorServiceMockRecorder) PostAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAuthor", reflect.TypeOf((*MockAuthorService)(nil).PostAuthor), arg0, arg1)
}

// PutAuthor mocks base method.
func (m *MockAuthorService) PutAuthor(arg0 context.Context, arg1 entities.Author) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuthor", arg0, arg1)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuthor indicates an expected call of PutAuthor.
func (mr *MockAuthorServiceMockRecorder) PutAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthor", reflect.TypeOf((*MockAuthorService)(nil).PutAuthor), arg0, arg1)
}

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// DeleteBook mocks base method.
func (m *MockBookService) DeleteBook(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookServiceMockRecorder) DeleteBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookService)(nil).DeleteBook), arg0, arg1)
}

// GetAllBook mocks base method.
func (m *MockBookService) GetAllBook(arg0 context.Context, arg1, arg2 string) ([]entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBook", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBook indicates an expected call of GetAllBook.
func (mr *MockBookServiceMockRecorder) GetAllBook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBook", reflect.TypeOf((*MockBookService)(nil).GetAllBook), arg0, arg1, arg2)
}

// GetBookByID mocks base method.
func (m *MockBookService) GetBookByID(arg0 context.Context, arg1 int) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", arg0, arg1)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockBookServiceMockRecorder) GetBookByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockBookService)(nil).GetBookByID), arg0, arg1)
}

// PostBook mocks base method.
func (m *MockBookService) PostBook(ctx context.Context, book *entities.Book) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBook", ctx, book)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBook indicates an expected call of PostBook.
func (mr *MockBookServiceMockRecorder) PostBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBook", reflect.TypeOf((*MockBookService)(nil).PostBook), ctx, book)
}

// PutBook mocks base method.
func (m *MockBookService) PutBook(ctx context.Context, book *entities.Book, id int) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBook", ctx, book, id)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBook indicates an expected call of PutBook.
func (mr *MockBookServiceMockRecorder) PutBook(ctx, book, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBook", reflect.TypeOf((*MockBookService)(nil).PutBook), ctx, book, id)
}
